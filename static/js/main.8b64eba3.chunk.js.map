{"version":3,"sources":["models/api.ts","components/QuizCard.styles.ts","components/QuizCard.tsx","components/QuizInfo.tsx","images/bg.jpg","components/App.styles.ts","components/App.tsx","index.tsx"],"names":["Category","Wrapper","styled","div","ButtonWrapper","correctOption","isClicked","QuizCard","question","correctAnswer","incorrectAnswers","emitAnswer","onAnswer","useState","options","setOptions","clicked","setClicked","chosenAnswer","setChosenAnswer","useEffect","sort","Math","random","handleClick","answer","currentTarget","value","className","dangerouslySetInnerHTML","__html","map","option","disabled","onClick","starsOfDifficulty","easy","medium","hard","QuizInfo","quizIndex","totalQuizzes","score","difficulty","fetchQuizData","amount","category","a","endpoint","fetch","json","data","results","GlobalStyle","createGlobalStyle","normalize","bgImg","isQuizAnswered","undefined","chosen_answer","isQuizCorrectAnswered","correct_answer","App","quizNumber","setQuizNumber","quizzes","setQuizzes","filter","length","isOver","every","quiz","incorrect_answers","Object","assign","COMPUTERS_SCIENCE","then","catch","console","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b64eba3.chunk.js","sourcesContent":["export enum Category {\r\n  COMPUTERS_SCIENCE = \"18\",\r\n}\r\n\r\nexport type QuizResponse = {\r\n  category: string;\r\n  type: string;\r\n  difficulty: \"easy\" | \"medium\" | \"hard\";\r\n  question: string;\r\n  correct_answer: string;\r\n  incorrect_answers: string[];\r\n};\r\n\r\nexport const fetchQuizData = async (\r\n  amount: number,\r\n  category: Category\r\n): Promise<QuizResponse[]> => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&type=multiple`;\r\n\r\n  const data = await (await fetch(endpoint)).json();\r\n\r\n  return data.results;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correctOption: boolean;\r\n  isClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 1rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 4px 0;\r\n    background: ${({ correctOption, isClicked }) =>\r\n      correctOption\r\n        ? \"linear-gradient(90deg, #56FFA4, #59BC86)\"\r\n        : isClicked\r\n        ? \"linear-gradient(90deg, #FF5656, #C16868)\"\r\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: white;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Wrapper, ButtonWrapper } from \"./QuizCard.styles\";\r\n\r\ntype QuizCardProps = {\r\n  question: string;\r\n  correctAnswer: string;\r\n  incorrectAnswers: string[];\r\n  onAnswer: (option: string) => void;\r\n};\r\n\r\nconst shuffleOptions = (array: string[]) =>\r\n  array.sort(() => Math.random() - 0.5);\r\n\r\nconst QuizCard: React.FC<QuizCardProps> = ({\r\n  question,\r\n  correctAnswer,\r\n  incorrectAnswers,\r\n  onAnswer: emitAnswer,\r\n}) => {\r\n  const [options, setOptions] = useState<string[]>([]);\r\n  const [clicked, setClicked] = useState(false);\r\n  const [chosenAnswer, setChosenAnswer] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setOptions(() => shuffleOptions([...incorrectAnswers, correctAnswer]));\r\n    setClicked(false);\r\n  }, [incorrectAnswers, correctAnswer]);\r\n\r\n  const handleClick = ({\r\n    currentTarget: { value: answer },\r\n  }: React.MouseEvent<HTMLButtonElement>) => {\r\n    setClicked(true);\r\n    setChosenAnswer(answer);\r\n    emitAnswer(answer);\r\n  };\r\n\r\n  return (\r\n    <Wrapper className=\"card\">\r\n      <h3\r\n        className=\"card__question\"\r\n        dangerouslySetInnerHTML={{ __html: question }}\r\n      />\r\n      <div className=\"card__options\">\r\n        {options.map((option) => (\r\n          <ButtonWrapper\r\n            key={option}\r\n            correctOption={option === correctAnswer && clicked}\r\n            isClicked={chosenAnswer === option}\r\n          >\r\n            <button value={option} disabled={clicked} onClick={handleClick}>\r\n              <span dangerouslySetInnerHTML={{ __html: option }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default QuizCard;\r\n","import React from \"react\";\r\n\r\ntype QuizInfoProps = {\r\n  quizIndex: number;\r\n  totalQuizzes: number;\r\n  score: number;\r\n  difficulty: \"easy\" | \"medium\" | \"hard\";\r\n};\r\n\r\nconst starsOfDifficulty: Record<string, string> = {\r\n  easy: \"★☆☆\",\r\n  medium: \"★★☆\",\r\n  hard: \"★★★\",\r\n};\r\n\r\nconst QuizInfo: React.FC<QuizInfoProps> = ({\r\n  quizIndex,\r\n  totalQuizzes,\r\n  score,\r\n  difficulty,\r\n}) => {\r\n  return (\r\n    <div className=\"infoBar\">\r\n      <h3 className=\"infoBar__number\">\r\n        {quizIndex} / {totalQuizzes}\r\n      </h3>\r\n      <h3 className=\"infoBar__difficulty\">{starsOfDifficulty[difficulty]}</h3>\r\n      <h3 className=\"infoBar__score\">Score: {score}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizInfo;\r\n","export default __webpack_public_path__ + \"static/media/bg.c0b7182b.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport { normalize } from \"styled-normalize\";\r\nimport bgImg from \"../images/bg.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n\r\n  html {\r\n    height: 100%;\r\n    font-family: 'Catamaran', sans-serif;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${bgImg});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  .app__title {\r\n    font-family: Fascinate Impact, Haettenschweiler, \"Arial Narrow Bold\",\r\n      sans-serif;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 64px;\r\n    text-align: center;\r\n    margin: 16px;\r\n  }\r\n\r\n  .infoBar {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    &__number,\r\n    &__difficulty {\r\n      color: darkblue;\r\n    }\r\n\r\n    &__score {\r\n      color: gold;\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n\r\n  .app__start,\r\n  .app__next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 8px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .app__next:disabled {\r\n    visibility: hidden;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\n// Components\r\nimport QuizCard from \"./QuizCard\";\r\nimport QuizInfo from \"./QuizInfo\";\r\n\r\n// Models\r\nimport { fetchQuizData, Category, QuizResponse } from \"../models/api\";\r\n\r\n// Styles\r\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\r\n\r\nconst TOTAL_QUIZZES = 10;\r\n\r\ntype userAnswer = {\r\n  chosen_answer?: string;\r\n};\r\n\r\ntype Quiz = QuizResponse & userAnswer;\r\n\r\nconst isQuizAnswered = ({ chosen_answer }: Quiz) => chosen_answer !== undefined;\r\n\r\nconst isQuizCorrectAnswered = ({ correct_answer, chosen_answer }: Quiz) =>\r\n  chosen_answer === correct_answer;\r\n\r\nconst App = () => {\r\n  const [quizNumber, setQuizNumber] = useState(0);\r\n  const [quizzes, setQuizzes] = useState<Quiz[]>([]);\r\n  const score = quizzes.filter(isQuizCorrectAnswered).length;\r\n  const isOver = quizzes.every(isQuizAnswered);\r\n  const quiz = quizzes[quizNumber];\r\n\r\n  const answerQuiz = (chosen_answer: string) => {\r\n    setQuizzes((quizzes) =>\r\n      Object.assign([...quizzes], {\r\n        [quizNumber]: { ...quiz, chosen_answer },\r\n      })\r\n    );\r\n  };\r\n\r\n  const nextQuiz = () => setQuizNumber((quizNumber) => quizNumber + 1);\r\n\r\n  const loadQuizzes = () =>\r\n    fetchQuizData(TOTAL_QUIZZES, Category.COMPUTERS_SCIENCE)\r\n      .then((quizzes: Quiz[]) => {\r\n        setQuizNumber(0);\r\n        setQuizzes(quizzes);\r\n      })\r\n      .catch(console.error);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <div className=\"App\">\r\n        <Wrapper>\r\n          <h1 className=\"app__title\">REACT QUIZ</h1>\r\n          {quizzes.length === 0 ? (\r\n            <>\r\n              <h3>Welcome to the Computer-Science Quiz!</h3>\r\n              <p>👇 Click to start</p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <QuizInfo\r\n                quizIndex={quizNumber + 1}\r\n                totalQuizzes={TOTAL_QUIZZES}\r\n                score={score}\r\n                difficulty={quiz.difficulty}\r\n              />\r\n              <QuizCard\r\n                question={quiz.question}\r\n                correctAnswer={quiz.correct_answer}\r\n                incorrectAnswers={quiz.incorrect_answers}\r\n                onAnswer={answerQuiz}\r\n              />\r\n            </>\r\n          )}\r\n          {isOver ? (\r\n            <button className=\"app__start\" onClick={loadQuizzes}>\r\n              {quizNumber === 0 ? \"Start\" : \"Restart\"}\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className=\"app__next\"\r\n              onClick={nextQuiz}\r\n              disabled={!isQuizAnswered(quiz)}\r\n            >\r\n              Next Question\r\n            </button>\r\n          )}\r\n        </Wrapper>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport DevApp from \"./components/DevApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <DevApp /> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}