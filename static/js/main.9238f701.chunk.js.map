{"version":3,"sources":["models/api.ts","components/QuizCard.styles.ts","components/QuizCard.tsx","components/QuizInfoBar.tsx","components/App.styles.ts","components/App.tsx","index.tsx"],"names":["Category","Wrapper","styled","div","ButtonWrapper","correctOption","isClicked","QuizCard","question","correctAnswer","incorrectAnswers","checkAnswer","useState","options","setOptions","clicked","setClicked","chosenAnswer","setChosenAnswer","useEffect","sort","Math","random","className","dangerouslySetInnerHTML","__html","map","option","value","disabled","onClick","callback","currentTarget","answer","QuizInfoBar","quizIndex","totalQuizzes","score","fetchQuizData","amount","category","a","endpoint","fetch","json","data","results","GlobalStyle","createGlobalStyle","normalize","App","loading","setLoading","gameOver","setGameOver","quizzes","setQuizzes","index","setIndex","setScore","answered","setAnswered","startQuiz","COMPUTERS_SCIENCE","then","res","catch","err","console","error","correct_answer","incorrect_answers","selectedOption","isCorrect","prevScore","TOTAL_QUIZZES","prevIndex","style","visibility","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9238f701.chunk.js","sourcesContent":["export enum Category {\r\n  COMPUTERS_SCIENCE = \"18\",\r\n}\r\n\r\nexport type Quiz = {\r\n  category: string;\r\n  type: string;\r\n  difficulty: string;\r\n  question: string;\r\n  correct_answer: string;\r\n  incorrect_answers: string[];\r\n};\r\n\r\nexport type QuizResponse = Quiz & { options: string[] };\r\n\r\nexport const fetchQuizData = async (amount: number, category: Category) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&type=multiple`;\r\n\r\n  const data = await (await fetch(endpoint)).json();\r\n\r\n  return data.results;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correctOption: boolean;\r\n  isClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 1rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 4px 0;\r\n    background: ${({ correctOption, isClicked }) =>\r\n      correctOption\r\n        ? \"linear-gradient(90deg, #56FFA4, #59BC86)\"\r\n        : isClicked\r\n        ? \"linear-gradient(90deg, #FF5656, #C16868)\"\r\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: white;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Wrapper, ButtonWrapper } from \"./QuizCard.styles\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  correctAnswer: string;\r\n  incorrectAnswers: string[];\r\n  checkAnswer: (option: string) => void;\r\n};\r\n\r\nconst QuizCard: React.FC<Props> = ({\r\n  question,\r\n  correctAnswer,\r\n  incorrectAnswers,\r\n  checkAnswer,\r\n}) => {\r\n  const [options, setOptions] = useState<string[]>([]);\r\n  const [clicked, setClicked] = useState(false);\r\n  const [chosenAnswer, setChosenAnswer] = useState(\"\");\r\n\r\n  const shuffleOptions = (array: string[]) =>\r\n    array.sort(() => Math.random() - 0.5);\r\n\r\n  useEffect(() => {\r\n    setOptions(() => shuffleOptions([...incorrectAnswers, correctAnswer]));\r\n    setClicked(false);\r\n  }, [incorrectAnswers, correctAnswer]);\r\n\r\n  // Curring\r\n  const handleClick = (callback: any) => (answer: string) => {\r\n    setClicked(true);\r\n    setChosenAnswer(answer);\r\n    // .textContent 或 .innerText 會將 HTML 特殊字元轉為一般文字 (&lt; 轉為 <)，造成比對錯誤\r\n    callback(answer);\r\n  };\r\n\r\n  return (\r\n    <Wrapper className=\"card\">\r\n      <h3 dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div className=\"card__options\">\r\n        {options.map((option) => (\r\n          <ButtonWrapper\r\n            key={option}\r\n            correctOption={option === correctAnswer && clicked}\r\n            isClicked={chosenAnswer === option}\r\n          >\r\n            <button\r\n              value={option}\r\n              disabled={clicked}\r\n              onClick={({ currentTarget: { value } }) =>\r\n                handleClick(checkAnswer)(value)\r\n              }\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: option }}></span>\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default QuizCard;\r\n","import React, { useState } from \"react\";\r\n\r\ntype Props = {\r\n  quizIndex: number;\r\n  totalQuizzes: number;\r\n  score: number;\r\n};\r\n\r\nconst QuizInfoBar: React.FC<Props> = ({ quizIndex, totalQuizzes, score }) => {\r\n  return (\r\n    <div className=\"infoBar\">\r\n      <h3>\r\n        {quizIndex} / {totalQuizzes}\r\n      </h3>\r\n      <h3 className=\"infoBar__score\">Score: {score}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizInfoBar;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport { normalize } from \"styled-normalize\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n\r\n  html {\r\n    height: 100%;\r\n    font-family: 'Catamaran', sans-serif;\r\n  }\r\n\r\n  body {\r\n    background-image: url('/brandon-norton.jpg');\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  .app__title {\r\n    font-family: Fascinate Impact, Haettenschweiler, \"Arial Narrow Bold\",\r\n      sans-serif;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 64px;\r\n    text-align: center;\r\n    margin: 16px;\r\n  }\r\n\r\n  .infoBar {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    &__score {\r\n      color: #ffe777;\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n\r\n  .app__start,\r\n  .app__next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 8px 0;\r\n    padding: 0 40px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\n// Components\nimport QuizCard from \"./QuizCard\";\nimport QuizInfoBar from \"./QuizInfoBar\";\n\n// Models\nimport { fetchQuizData, Category, QuizResponse } from \"../models/api\";\n\n// Styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nconst TOTAL_QUIZZES = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [gameOver, setGameOver] = useState(true);\n  const [quizzes, setQuizzes] = useState<QuizResponse[]>([]);\n  const [index, setIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [answered, setAnswered] = useState(false);\n\n  const startQuiz = async () => {\n    await fetchQuizData(TOTAL_QUIZZES, Category.COMPUTERS_SCIENCE)\n      .then((res) => {\n        setQuizzes(res);\n        setLoading(false);\n        setIndex(0);\n      })\n      .catch((err) => console.error(err));\n    setGameOver(false);\n    setAnswered(false);\n    setScore(0);\n  };\n\n  const checkAnswer = (selectedOption: string) => {\n    const isCorrect = quizzes[index].correct_answer === selectedOption;\n    setAnswered(true);\n    if (isCorrect) setScore((prevScore) => prevScore + 1);\n    if (index === TOTAL_QUIZZES - 1) setGameOver(true);\n  };\n\n  const nextQuiz = () => {\n    setAnswered(false);\n    if (index < TOTAL_QUIZZES - 1) setIndex((prevIndex) => prevIndex + 1);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <div className=\"App\">\n        <Wrapper>\n          <h1 className=\"app__title\">REACT QUIZ</h1>\n          <QuizInfoBar\n            quizIndex={index + 1}\n            totalQuizzes={TOTAL_QUIZZES}\n            score={score}\n          />\n          {gameOver && index === 0 ? (\n            <>\n              <h3>Welcome to the Computer-Science Quiz!</h3>\n              <p>👇 Click to start</p>\n            </>\n          ) : loading ? (\n            <p className=\"app__loading\">Loading Questions ...</p>\n          ) : (\n            <QuizCard\n              question={quizzes[index].question}\n              correctAnswer={quizzes[index].correct_answer}\n              incorrectAnswers={quizzes[index].incorrect_answers}\n              checkAnswer={checkAnswer}\n            />\n          )}\n          {gameOver ? (\n            <button className=\"app__start\" onClick={startQuiz}>\n              Start\n            </button>\n          ) : (\n            <button\n              className=\"app__next\"\n              onClick={nextQuiz}\n              style={{ visibility: answered ? \"visible\" : \"hidden\" }}\n            >\n              Next Question\n            </button>\n          )}\n        </Wrapper>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}